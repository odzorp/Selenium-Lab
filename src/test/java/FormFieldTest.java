// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
public class FormfieldTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void formfield() {
    // Test name: form-field
    // Step # | name | target | value
    // 1 | open | / | 
    driver.get("https://practice-automation.com/");
    // 2 | setWindowSize | 976x1040 | 
    driver.manage().window().setSize(new Dimension(976, 1040));
    // 3 | click | linkText=Form Fields | 
    driver.findElement(By.linkText("Form Fields")).click();
    // 4 | click | id=name | 
    driver.findElement(By.id("name")).click();
    // 5 | type | id=name | Philip
    driver.findElement(By.id("name")).sendKeys("Philip");
    // 6 | click | id=drink1 | 
    driver.findElement(By.id("drink1")).click();
    // 7 | click | id=drink2 | 
    driver.findElement(By.id("drink2")).click();
    // 8 | click | id=drink3 | 
    driver.findElement(By.id("drink3")).click();
    // 9 | click | id=drink4 | 
    driver.findElement(By.id("drink4")).click();
    // 10 | click | id=drink5 | 
    driver.findElement(By.id("drink5")).click();
    // 11 | click | id=color4 | 
    driver.findElement(By.id("color4")).click();
    // 12 | click | id=siblings | 
    driver.findElement(By.id("siblings")).click();
    // 13 | select | id=siblings | label=Yes
    {
      WebElement dropdown = driver.findElement(By.id("siblings"));
      dropdown.findElement(By.xpath("//option[. = 'Yes']")).click();
    }
    // 14 | click | id=email | 
    driver.findElement(By.id("email")).click();
    // 15 | type | id=email | odzorp3@gmail.com
    driver.findElement(By.id("email")).sendKeys("odzorp3@gmail.com");
    // 16 | click | id=message | 
    driver.findElement(By.id("message")).click();
    // 17 | type | id=message | Hello World
    driver.findElement(By.id("message")).sendKeys("Hello World");
    // 18 | click | id=submit-btn | 
    driver.findElement(By.id("submit-btn")).click();
    // 19 | assertAlert | Message received! | 
    assertThat(driver.switchTo().alert().getText(), is("Message received!"));
    // 20 | click | css=chatgpt-sidebar | 
    driver.findElement(By.cssSelector("chatgpt-sidebar")).click();
    // 21 | mouseDownAt | id=to-top | 11,33
    {
      WebElement element = driver.findElement(By.id("to-top"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).clickAndHold().perform();
    }
    // 22 | mouseMoveAt | id=to-top | 11,33
    {
      WebElement element = driver.findElement(By.id("to-top"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).perform();
    }
    // 23 | mouseUpAt | id=to-top | 11,33
    {
      WebElement element = driver.findElement(By.id("to-top"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).release().perform();
    }
    // 24 | click | id=to-top | 
    driver.findElement(By.id("to-top")).click();
  }
}
